// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: department.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DepartmentClient is the client API for Department service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DepartmentClient interface {
	GetDepartments(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetDepartmentsResponse, error)
}

type departmentClient struct {
	cc grpc.ClientConnInterface
}

func NewDepartmentClient(cc grpc.ClientConnInterface) DepartmentClient {
	return &departmentClient{cc}
}

func (c *departmentClient) GetDepartments(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetDepartmentsResponse, error) {
	out := new(GetDepartmentsResponse)
	err := c.cc.Invoke(ctx, "/greek.gflow.department.v1.Department/GetDepartments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DepartmentServer is the server API for Department service.
// All implementations must embed UnimplementedDepartmentServer
// for forward compatibility
type DepartmentServer interface {
	GetDepartments(context.Context, *emptypb.Empty) (*GetDepartmentsResponse, error)
	mustEmbedUnimplementedDepartmentServer()
}

// UnimplementedDepartmentServer must be embedded to have forward compatible implementations.
type UnimplementedDepartmentServer struct {
}

func (UnimplementedDepartmentServer) GetDepartments(context.Context, *emptypb.Empty) (*GetDepartmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepartments not implemented")
}
func (UnimplementedDepartmentServer) mustEmbedUnimplementedDepartmentServer() {}

// UnsafeDepartmentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DepartmentServer will
// result in compilation errors.
type UnsafeDepartmentServer interface {
	mustEmbedUnimplementedDepartmentServer()
}

func RegisterDepartmentServer(s grpc.ServiceRegistrar, srv DepartmentServer) {
	s.RegisterService(&Department_ServiceDesc, srv)
}

func _Department_GetDepartments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentServer).GetDepartments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greek.gflow.department.v1.Department/GetDepartments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentServer).GetDepartments(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Department_ServiceDesc is the grpc.ServiceDesc for Department service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Department_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "greek.gflow.department.v1.Department",
	HandlerType: (*DepartmentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDepartments",
			Handler:    _Department_GetDepartments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "department.proto",
}
