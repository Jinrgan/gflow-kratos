// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: workflow.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WorkflowType int32

const (
	WorkflowType_TYPE_NOT_SPECIFIED WorkflowType = 0
)

// Enum value maps for WorkflowType.
var (
	WorkflowType_name = map[int32]string{
		0: "TYPE_NOT_SPECIFIED",
	}
	WorkflowType_value = map[string]int32{
		"TYPE_NOT_SPECIFIED": 0,
	}
)

func (x WorkflowType) Enum() *WorkflowType {
	p := new(WorkflowType)
	*p = x
	return p
}

func (x WorkflowType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkflowType) Descriptor() protoreflect.EnumDescriptor {
	return file_workflow_proto_enumTypes[0].Descriptor()
}

func (WorkflowType) Type() protoreflect.EnumType {
	return &file_workflow_proto_enumTypes[0]
}

func (x WorkflowType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkflowType.Descriptor instead.
func (WorkflowType) EnumDescriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{0}
}

type Status int32

const (
	Status_STATUS_NOT_SPECIFIED Status = 0
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "STATUS_NOT_SPECIFIED",
	}
	Status_value = map[string]int32{
		"STATUS_NOT_SPECIFIED": 0,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_workflow_proto_enumTypes[1].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_workflow_proto_enumTypes[1]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{1}
}

type ProcessType int32

const (
	ProcessType_START ProcessType = 0
	ProcessType_STEP  ProcessType = 1
)

// Enum value maps for ProcessType.
var (
	ProcessType_name = map[int32]string{
		0: "START",
		1: "STEP",
	}
	ProcessType_value = map[string]int32{
		"START": 0,
		"STEP":  1,
	}
)

func (x ProcessType) Enum() *ProcessType {
	p := new(ProcessType)
	*p = x
	return p
}

func (x ProcessType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProcessType) Descriptor() protoreflect.EnumDescriptor {
	return file_workflow_proto_enumTypes[2].Descriptor()
}

func (ProcessType) Type() protoreflect.EnumType {
	return &file_workflow_proto_enumTypes[2]
}

func (x ProcessType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProcessType.Descriptor instead.
func (ProcessType) EnumDescriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{2}
}

type ProcessMode int32

const (
	ProcessMode_LINEAR                 ProcessMode = 0
	ProcessMode_NEXT_PROCESS_CONDITION ProcessMode = 1
	ProcessMode_SYNC                   ProcessMode = 2
)

// Enum value maps for ProcessMode.
var (
	ProcessMode_name = map[int32]string{
		0: "LINEAR",
		1: "NEXT_PROCESS_CONDITION",
		2: "SYNC",
	}
	ProcessMode_value = map[string]int32{
		"LINEAR":                 0,
		"NEXT_PROCESS_CONDITION": 1,
		"SYNC":                   2,
	}
)

func (x ProcessMode) Enum() *ProcessMode {
	p := new(ProcessMode)
	*p = x
	return p
}

func (x ProcessMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProcessMode) Descriptor() protoreflect.EnumDescriptor {
	return file_workflow_proto_enumTypes[3].Descriptor()
}

func (ProcessMode) Type() protoreflect.EnumType {
	return &file_workflow_proto_enumTypes[3]
}

func (x ProcessMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProcessMode.Descriptor instead.
func (ProcessMode) EnumDescriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{3}
}

type ProcessApprovalType int32

const (
	ProcessApprovalType_CUSTOM_CHOICE          ProcessApprovalType = 0 // 自由选择
	ProcessApprovalType_SPECIFY_APPROVER       ProcessApprovalType = 1 // 指定人员
	ProcessApprovalType_SPECIFY_BY_ROLE        ProcessApprovalType = 2 // 指定角色
	ProcessApprovalType_TRANSACTION_ACCEPTANCE ProcessApprovalType = 3 // 事务接受
)

// Enum value maps for ProcessApprovalType.
var (
	ProcessApprovalType_name = map[int32]string{
		0: "CUSTOM_CHOICE",
		1: "SPECIFY_APPROVER",
		2: "SPECIFY_BY_ROLE",
		3: "TRANSACTION_ACCEPTANCE",
	}
	ProcessApprovalType_value = map[string]int32{
		"CUSTOM_CHOICE":          0,
		"SPECIFY_APPROVER":       1,
		"SPECIFY_BY_ROLE":        2,
		"TRANSACTION_ACCEPTANCE": 3,
	}
)

func (x ProcessApprovalType) Enum() *ProcessApprovalType {
	p := new(ProcessApprovalType)
	*p = x
	return p
}

func (x ProcessApprovalType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProcessApprovalType) Descriptor() protoreflect.EnumDescriptor {
	return file_workflow_proto_enumTypes[4].Descriptor()
}

func (ProcessApprovalType) Type() protoreflect.EnumType {
	return &file_workflow_proto_enumTypes[4]
}

func (x ProcessApprovalType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProcessApprovalType.Descriptor instead.
func (ProcessApprovalType) EnumDescriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{4}
}

type WorkflowDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Describe  string               `protobuf:"bytes,3,opt,name=describe,proto3" json:"describe,omitempty"`
	Type      WorkflowType         `protobuf:"varint,4,opt,name=type,proto3,enum=greek.gflow.workflow.v1.WorkflowType" json:"type,omitempty"`
	Status    Status               `protobuf:"varint,5,opt,name=status,proto3,enum=greek.gflow.workflow.v1.Status" json:"status,omitempty"`
	SortOrder int32                `protobuf:"varint,6,opt,name=sort_order,json=sortOrder,proto3" json:"sort_order,omitempty"`
	CreatedBy string               `protobuf:"bytes,7,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	CreatedAt *durationpb.Duration `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *WorkflowDTO) Reset() {
	*x = WorkflowDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowDTO) ProtoMessage() {}

func (x *WorkflowDTO) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowDTO.ProtoReflect.Descriptor instead.
func (*WorkflowDTO) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{0}
}

func (x *WorkflowDTO) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WorkflowDTO) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkflowDTO) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *WorkflowDTO) GetType() WorkflowType {
	if x != nil {
		return x.Type
	}
	return WorkflowType_TYPE_NOT_SPECIFIED
}

func (x *WorkflowDTO) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_STATUS_NOT_SPECIFIED
}

func (x *WorkflowDTO) GetSortOrder() int32 {
	if x != nil {
		return x.SortOrder
	}
	return 0
}

func (x *WorkflowDTO) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *WorkflowDTO) GetCreatedAt() *durationpb.Duration {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type CreateWorkflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Describe  string       `protobuf:"bytes,2,opt,name=describe,proto3" json:"describe,omitempty"`
	SortOrder int32        `protobuf:"varint,3,opt,name=sort_order,json=sortOrder,proto3" json:"sort_order,omitempty"`
	Status    Status       `protobuf:"varint,4,opt,name=status,proto3,enum=greek.gflow.workflow.v1.Status" json:"status,omitempty"`
	Type      WorkflowType `protobuf:"varint,5,opt,name=type,proto3,enum=greek.gflow.workflow.v1.WorkflowType" json:"type,omitempty"`
}

func (x *CreateWorkflowRequest) Reset() {
	*x = CreateWorkflowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWorkflowRequest) ProtoMessage() {}

func (x *CreateWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWorkflowRequest.ProtoReflect.Descriptor instead.
func (*CreateWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{1}
}

func (x *CreateWorkflowRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateWorkflowRequest) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *CreateWorkflowRequest) GetSortOrder() int32 {
	if x != nil {
		return x.SortOrder
	}
	return 0
}

func (x *CreateWorkflowRequest) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_STATUS_NOT_SPECIFIED
}

func (x *CreateWorkflowRequest) GetType() WorkflowType {
	if x != nil {
		return x.Type
	}
	return WorkflowType_TYPE_NOT_SPECIFIED
}

type CreateWorkflowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateWorkflowResponse) Reset() {
	*x = CreateWorkflowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWorkflowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWorkflowResponse) ProtoMessage() {}

func (x *CreateWorkflowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWorkflowResponse.ProtoReflect.Descriptor instead.
func (*CreateWorkflowResponse) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{2}
}

func (x *CreateWorkflowResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetWorkflowDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetWorkflowDetailRequest) Reset() {
	*x = GetWorkflowDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkflowDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkflowDetailRequest) ProtoMessage() {}

func (x *GetWorkflowDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkflowDetailRequest.ProtoReflect.Descriptor instead.
func (*GetWorkflowDetailRequest) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{3}
}

func (x *GetWorkflowDetailRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetWorkflowDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Workflow *WorkflowDTO  `protobuf:"bytes,1,opt,name=workflow,proto3" json:"workflow,omitempty"`
	Process  []*ProcessDTO `protobuf:"bytes,6,rep,name=process,proto3" json:"process,omitempty"`
}

func (x *GetWorkflowDetailResponse) Reset() {
	*x = GetWorkflowDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkflowDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkflowDetailResponse) ProtoMessage() {}

func (x *GetWorkflowDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkflowDetailResponse.ProtoReflect.Descriptor instead.
func (*GetWorkflowDetailResponse) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{4}
}

func (x *GetWorkflowDetailResponse) GetWorkflow() *WorkflowDTO {
	if x != nil {
		return x.Workflow
	}
	return nil
}

func (x *GetWorkflowDetailResponse) GetProcess() []*ProcessDTO {
	if x != nil {
		return x.Process
	}
	return nil
}

type GetWorkflowsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type WorkflowType `protobuf:"varint,1,opt,name=type,proto3,enum=greek.gflow.workflow.v1.WorkflowType" json:"type,omitempty"`
}

func (x *GetWorkflowsRequest) Reset() {
	*x = GetWorkflowsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkflowsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkflowsRequest) ProtoMessage() {}

func (x *GetWorkflowsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkflowsRequest.ProtoReflect.Descriptor instead.
func (*GetWorkflowsRequest) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{5}
}

func (x *GetWorkflowsRequest) GetType() WorkflowType {
	if x != nil {
		return x.Type
	}
	return WorkflowType_TYPE_NOT_SPECIFIED
}

type GetWorkflowsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowDtos []*WorkflowDTO `protobuf:"bytes,1,rep,name=workflow_dtos,json=workflowDtos,proto3" json:"workflow_dtos,omitempty"`
}

func (x *GetWorkflowsResponse) Reset() {
	*x = GetWorkflowsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkflowsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkflowsResponse) ProtoMessage() {}

func (x *GetWorkflowsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkflowsResponse.ProtoReflect.Descriptor instead.
func (*GetWorkflowsResponse) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{6}
}

func (x *GetWorkflowsResponse) GetWorkflowDtos() []*WorkflowDTO {
	if x != nil {
		return x.WorkflowDtos
	}
	return nil
}

type UpdateWorkflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Describe  string       `protobuf:"bytes,3,opt,name=describe,proto3" json:"describe,omitempty"`
	Type      WorkflowType `protobuf:"varint,4,opt,name=type,proto3,enum=greek.gflow.workflow.v1.WorkflowType" json:"type,omitempty"`
	Status    Status       `protobuf:"varint,5,opt,name=status,proto3,enum=greek.gflow.workflow.v1.Status" json:"status,omitempty"`
	SortOrder int32        `protobuf:"varint,6,opt,name=sort_order,json=sortOrder,proto3" json:"sort_order,omitempty"`
}

func (x *UpdateWorkflowRequest) Reset() {
	*x = UpdateWorkflowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWorkflowRequest) ProtoMessage() {}

func (x *UpdateWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWorkflowRequest.ProtoReflect.Descriptor instead.
func (*UpdateWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateWorkflowRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateWorkflowRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateWorkflowRequest) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *UpdateWorkflowRequest) GetType() WorkflowType {
	if x != nil {
		return x.Type
	}
	return WorkflowType_TYPE_NOT_SPECIFIED
}

func (x *UpdateWorkflowRequest) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_STATUS_NOT_SPECIFIED
}

func (x *UpdateWorkflowRequest) GetSortOrder() int32 {
	if x != nil {
		return x.SortOrder
	}
	return 0
}

type DeleteWorkflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteWorkflowRequest) Reset() {
	*x = DeleteWorkflowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWorkflowRequest) ProtoMessage() {}

func (x *DeleteWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWorkflowRequest.ProtoReflect.Descriptor instead.
func (*DeleteWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteWorkflowRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ProcessDiagram struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XCoordinate    int32    `protobuf:"varint,1,opt,name=x_coordinate,json=xCoordinate,proto3" json:"x_coordinate,omitempty"`
	YCoordinate    int32    `protobuf:"varint,2,opt,name=y_coordinate,json=yCoordinate,proto3" json:"y_coordinate,omitempty"`
	NextProcessIds []string `protobuf:"bytes,3,rep,name=next_process_ids,json=nextProcessIds,proto3" json:"next_process_ids,omitempty"`
}

func (x *ProcessDiagram) Reset() {
	*x = ProcessDiagram{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessDiagram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessDiagram) ProtoMessage() {}

func (x *ProcessDiagram) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessDiagram.ProtoReflect.Descriptor instead.
func (*ProcessDiagram) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{9}
}

func (x *ProcessDiagram) GetXCoordinate() int32 {
	if x != nil {
		return x.XCoordinate
	}
	return 0
}

func (x *ProcessDiagram) GetYCoordinate() int32 {
	if x != nil {
		return x.YCoordinate
	}
	return 0
}

func (x *ProcessDiagram) GetNextProcessIds() []string {
	if x != nil {
		return x.NextProcessIds
	}
	return nil
}

type ProcessDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	WorkflowId           string               `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	Type                 ProcessType          `protobuf:"varint,3,opt,name=type,proto3,enum=greek.gflow.workflow.v1.ProcessType" json:"type,omitempty"`
	Name                 string               `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	WorkflowName         string               `protobuf:"bytes,5,opt,name=workflow_name,json=workflowName,proto3" json:"workflow_name,omitempty"`
	ApprovalType         ProcessApprovalType  `protobuf:"varint,6,opt,name=approval_type,json=approvalType,proto3,enum=greek.gflow.workflow.v1.ProcessApprovalType" json:"approval_type,omitempty"`
	ApproverIds          []string             `protobuf:"bytes,7,rep,name=approver_ids,json=approverIds,proto3" json:"approver_ids,omitempty"`
	ApproverText         []string             `protobuf:"bytes,8,rep,name=approver_text,json=approverText,proto3" json:"approver_text,omitempty"`
	AllowCountersigned   bool                 `protobuf:"varint,9,opt,name=allow_countersigned,json=allowCountersigned,proto3" json:"allow_countersigned,omitempty"`
	AllowGoBack          bool                 `protobuf:"varint,10,opt,name=allow_go_back,json=allowGoBack,proto3" json:"allow_go_back,omitempty"`
	NextProcessCondition bool                 `protobuf:"varint,11,opt,name=next_process_condition,json=nextProcessCondition,proto3" json:"next_process_condition,omitempty"`
	Diagram              *ProcessDiagram      `protobuf:"bytes,12,opt,name=diagram,proto3" json:"diagram,omitempty"`
	UpdatedAt            *durationpb.Duration `protobuf:"bytes,13,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Dateline             int32                `protobuf:"varint,14,opt,name=dateline,proto3" json:"dateline,omitempty"`
	Mode                 ProcessMode          `protobuf:"varint,15,opt,name=mode,proto3,enum=greek.gflow.workflow.v1.ProcessMode" json:"mode,omitempty"`
}

func (x *ProcessDTO) Reset() {
	*x = ProcessDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessDTO) ProtoMessage() {}

func (x *ProcessDTO) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessDTO.ProtoReflect.Descriptor instead.
func (*ProcessDTO) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{10}
}

func (x *ProcessDTO) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProcessDTO) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *ProcessDTO) GetType() ProcessType {
	if x != nil {
		return x.Type
	}
	return ProcessType_START
}

func (x *ProcessDTO) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProcessDTO) GetWorkflowName() string {
	if x != nil {
		return x.WorkflowName
	}
	return ""
}

func (x *ProcessDTO) GetApprovalType() ProcessApprovalType {
	if x != nil {
		return x.ApprovalType
	}
	return ProcessApprovalType_CUSTOM_CHOICE
}

func (x *ProcessDTO) GetApproverIds() []string {
	if x != nil {
		return x.ApproverIds
	}
	return nil
}

func (x *ProcessDTO) GetApproverText() []string {
	if x != nil {
		return x.ApproverText
	}
	return nil
}

func (x *ProcessDTO) GetAllowCountersigned() bool {
	if x != nil {
		return x.AllowCountersigned
	}
	return false
}

func (x *ProcessDTO) GetAllowGoBack() bool {
	if x != nil {
		return x.AllowGoBack
	}
	return false
}

func (x *ProcessDTO) GetNextProcessCondition() bool {
	if x != nil {
		return x.NextProcessCondition
	}
	return false
}

func (x *ProcessDTO) GetDiagram() *ProcessDiagram {
	if x != nil {
		return x.Diagram
	}
	return nil
}

func (x *ProcessDTO) GetUpdatedAt() *durationpb.Duration {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ProcessDTO) GetDateline() int32 {
	if x != nil {
		return x.Dateline
	}
	return 0
}

func (x *ProcessDTO) GetMode() ProcessMode {
	if x != nil {
		return x.Mode
	}
	return ProcessMode_LINEAR
}

type CreateProcessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowId string `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
}

func (x *CreateProcessRequest) Reset() {
	*x = CreateProcessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProcessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProcessRequest) ProtoMessage() {}

func (x *CreateProcessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProcessRequest.ProtoReflect.Descriptor instead.
func (*CreateProcessRequest) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{11}
}

func (x *CreateProcessRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

type CreateProcessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateProcessResponse) Reset() {
	*x = CreateProcessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProcessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProcessResponse) ProtoMessage() {}

func (x *CreateProcessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProcessResponse.ProtoReflect.Descriptor instead.
func (*CreateProcessResponse) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{12}
}

func (x *CreateProcessResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UpdateProcessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	WorkflowId           string              `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	Type                 ProcessType         `protobuf:"varint,3,opt,name=type,proto3,enum=greek.gflow.workflow.v1.ProcessType" json:"type,omitempty"`
	Name                 string              `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	ApprovalType         ProcessApprovalType `protobuf:"varint,5,opt,name=approval_type,json=approvalType,proto3,enum=greek.gflow.workflow.v1.ProcessApprovalType" json:"approval_type,omitempty"`
	ApproverIds          []string            `protobuf:"bytes,6,rep,name=approver_ids,json=approverIds,proto3" json:"approver_ids,omitempty"`
	ApproverText         []string            `protobuf:"bytes,7,rep,name=approver_text,json=approverText,proto3" json:"approver_text,omitempty"`
	AllowCountersigned   bool                `protobuf:"varint,8,opt,name=allow_countersigned,json=allowCountersigned,proto3" json:"allow_countersigned,omitempty"`
	AllowGoBack          bool                `protobuf:"varint,9,opt,name=allow_go_back,json=allowGoBack,proto3" json:"allow_go_back,omitempty"`
	NextProcessCondition bool                `protobuf:"varint,10,opt,name=next_process_condition,json=nextProcessCondition,proto3" json:"next_process_condition,omitempty"`
}

func (x *UpdateProcessRequest) Reset() {
	*x = UpdateProcessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProcessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProcessRequest) ProtoMessage() {}

func (x *UpdateProcessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProcessRequest.ProtoReflect.Descriptor instead.
func (*UpdateProcessRequest) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateProcessRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateProcessRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *UpdateProcessRequest) GetType() ProcessType {
	if x != nil {
		return x.Type
	}
	return ProcessType_START
}

func (x *UpdateProcessRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateProcessRequest) GetApprovalType() ProcessApprovalType {
	if x != nil {
		return x.ApprovalType
	}
	return ProcessApprovalType_CUSTOM_CHOICE
}

func (x *UpdateProcessRequest) GetApproverIds() []string {
	if x != nil {
		return x.ApproverIds
	}
	return nil
}

func (x *UpdateProcessRequest) GetApproverText() []string {
	if x != nil {
		return x.ApproverText
	}
	return nil
}

func (x *UpdateProcessRequest) GetAllowCountersigned() bool {
	if x != nil {
		return x.AllowCountersigned
	}
	return false
}

func (x *UpdateProcessRequest) GetAllowGoBack() bool {
	if x != nil {
		return x.AllowGoBack
	}
	return false
}

func (x *UpdateProcessRequest) GetNextProcessCondition() bool {
	if x != nil {
		return x.NextProcessCondition
	}
	return false
}

type DrawProcessesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Diagram []*ProcessDiagram `protobuf:"bytes,2,rep,name=diagram,proto3" json:"diagram,omitempty"`
}

func (x *DrawProcessesRequest) Reset() {
	*x = DrawProcessesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrawProcessesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawProcessesRequest) ProtoMessage() {}

func (x *DrawProcessesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawProcessesRequest.ProtoReflect.Descriptor instead.
func (*DrawProcessesRequest) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{14}
}

func (x *DrawProcessesRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DrawProcessesRequest) GetDiagram() []*ProcessDiagram {
	if x != nil {
		return x.Diagram
	}
	return nil
}

type DeleteProcessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteProcessRequest) Reset() {
	*x = DeleteProcessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProcessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProcessRequest) ProtoMessage() {}

func (x *DeleteProcessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProcessRequest.ProtoReflect.Descriptor instead.
func (*DeleteProcessRequest) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteProcessRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteProcessesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowId string `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
}

func (x *DeleteProcessesRequest) Reset() {
	*x = DeleteProcessesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProcessesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProcessesRequest) ProtoMessage() {}

func (x *DeleteProcessesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProcessesRequest.ProtoReflect.Descriptor instead.
func (*DeleteProcessesRequest) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteProcessesRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

// The request message containing the user's name.
type HelloRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *HelloRequest) Reset() {
	*x = HelloRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelloRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloRequest) ProtoMessage() {}

func (x *HelloRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloRequest.ProtoReflect.Descriptor instead.
func (*HelloRequest) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{17}
}

func (x *HelloRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// The response message containing the greetings
type HelloReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *HelloReply) Reset() {
	*x = HelloReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelloReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloReply) ProtoMessage() {}

func (x *HelloReply) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloReply.ProtoReflect.Descriptor instead.
func (*HelloReply) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{18}
}

func (x *HelloReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_workflow_proto protoreflect.FileDescriptor

var file_workflow_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x17, 0x67, 0x72, 0x65, 0x65, 0x6b, 0x2e, 0x67, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb9, 0x02, 0x0a, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x44, 0x54, 0x4f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x25, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6b, 0x2e, 0x67, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x37, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1f, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6b, 0x2e, 0x67, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6f,
	0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x22, 0xda, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f,
	0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x67, 0x72, 0x65, 0x65,
	0x6b, 0x2e, 0x67, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6b, 0x2e, 0x67, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x28, 0x0a,
	0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x9c, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x40, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6b, 0x2e, 0x67, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x44, 0x54, 0x4f, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x12, 0x3d, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6b, 0x2e, 0x67, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x54, 0x4f, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x22, 0x50, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6b, 0x2e,
	0x67, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76,
	0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x61, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0d,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x64, 0x74, 0x6f, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6b, 0x2e, 0x67, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x44, 0x54, 0x4f, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x44, 0x74, 0x6f, 0x73, 0x22, 0xea, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x25, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6b, 0x2e, 0x67, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x67,
	0x72, 0x65, 0x65, 0x6b, 0x2e, 0x67, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x22, 0x27, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x80, 0x01,
	0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x69, 0x61, 0x67, 0x72, 0x61, 0x6d,
	0x12, 0x21, 0x0a, 0x0c, 0x78, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x78, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x79, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x79, 0x43, 0x6f, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x73,
	0x22, 0xa9, 0x05, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x54, 0x4f, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64,
	0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24,
	0x2e, 0x67, 0x72, 0x65, 0x65, 0x6b, 0x2e, 0x67, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x67, 0x72, 0x65,
	0x65, 0x6b, 0x2e, 0x67, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x2f,
	0x0a, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12,
	0x22, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x67, 0x6f, 0x5f, 0x62, 0x61, 0x63, 0x6b,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x47, 0x6f, 0x42,
	0x61, 0x63, 0x6b, 0x12, 0x34, 0x0a, 0x16, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x14, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x07, 0x64, 0x69, 0x61,
	0x67, 0x72, 0x61, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x72, 0x65,
	0x65, 0x6b, 0x2e, 0x67, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x69, 0x61, 0x67,
	0x72, 0x61, 0x6d, 0x52, 0x07, 0x64, 0x69, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x38, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6b, 0x2e, 0x67, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x37, 0x0a, 0x14,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x49, 0x64, 0x22, 0x27, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xbb,
	0x03, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6b, 0x2e, 0x67,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e,
	0x67, 0x72, 0x65, 0x65, 0x6b, 0x2e, 0x67, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x67, 0x6f, 0x5f, 0x62,
	0x61, 0x63, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x47, 0x6f, 0x42, 0x61, 0x63, 0x6b, 0x12, 0x34, 0x0a, 0x16, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x69, 0x0a, 0x14,
	0x44, 0x72, 0x61, 0x77, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x07, 0x64, 0x69, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6b, 0x2e, 0x67, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x69, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x07,
	0x64, 0x69, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x22, 0x26, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x39, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x22, 0x22, 0x0a, 0x0c, 0x48, 0x65,
	0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x26,
	0x0a, 0x0a, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2a, 0x26, 0x0a, 0x0c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x2a, 0x22,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x2a, 0x22, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x53, 0x54, 0x45, 0x50, 0x10, 0x01, 0x2a, 0x3f, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x49, 0x4e, 0x45, 0x41, 0x52, 0x10,
	0x00, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x02, 0x2a, 0x6f, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11,
	0x0a, 0x0d, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x43, 0x48, 0x4f, 0x49, 0x43, 0x45, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x59, 0x5f, 0x41, 0x50, 0x50,
	0x52, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x59, 0x5f, 0x42, 0x59, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x43, 0x45,
	0x50, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x03, 0x32, 0xb6, 0x0b, 0x0a, 0x08, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x8a, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x2e, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6b,
	0x2e, 0x67, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6b,
	0x2e, 0x67, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x11, 0x22, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x3a,
	0x01, 0x2a, 0x12, 0x9c, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x31, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6b,
	0x2e, 0x67, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x67, 0x72,
	0x65, 0x65, 0x6b, 0x2e, 0x67, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x12, 0x82, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x12, 0x2c, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6b, 0x2e, 0x67, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2d, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6b, 0x2e, 0x67, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x76, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x2e, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6b,
	0x2e, 0x67, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x1a, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x73,
	0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x12, 0x2e, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6b, 0x2e, 0x67, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13,
	0x2a, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x12, 0x8f, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2d, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6b, 0x2e, 0x67, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6b, 0x2e, 0x67, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22, 0x14, 0x2f, 0x76,
	0x31, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x7c, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2d, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6b, 0x2e, 0x67,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x24, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x1a, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x3a, 0x01, 0x2a, 0x12, 0x81, 0x01, 0x0a, 0x0d, 0x44, 0x72, 0x61, 0x77, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x2d, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6b, 0x2e, 0x67, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x72, 0x61, 0x77, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x29, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x23, 0x1a, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x64, 0x69, 0x61,
	0x67, 0x72, 0x61, 0x6d, 0x3a, 0x01, 0x2a, 0x12, 0x79, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2d, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6b,
	0x2e, 0x67, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x2a, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x12, 0x88, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x2f, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6b, 0x2e, 0x67,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x2a, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x72, 0x0a,
	0x08, 0x53, 0x61, 0x79, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x25, 0x2e, 0x67, 0x72, 0x65, 0x65,
	0x6b, 0x2e, 0x67, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6b, 0x2e, 0x67, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f,
	0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x7d, 0x42, 0x1e, 0x5a, 0x1c, 0x67, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x6b, 0x72, 0x61, 0x74, 0x6f,
	0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_workflow_proto_rawDescOnce sync.Once
	file_workflow_proto_rawDescData = file_workflow_proto_rawDesc
)

func file_workflow_proto_rawDescGZIP() []byte {
	file_workflow_proto_rawDescOnce.Do(func() {
		file_workflow_proto_rawDescData = protoimpl.X.CompressGZIP(file_workflow_proto_rawDescData)
	})
	return file_workflow_proto_rawDescData
}

var file_workflow_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_workflow_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_workflow_proto_goTypes = []interface{}{
	(WorkflowType)(0),                 // 0: greek.gflow.workflow.v1.WorkflowType
	(Status)(0),                       // 1: greek.gflow.workflow.v1.Status
	(ProcessType)(0),                  // 2: greek.gflow.workflow.v1.ProcessType
	(ProcessMode)(0),                  // 3: greek.gflow.workflow.v1.ProcessMode
	(ProcessApprovalType)(0),          // 4: greek.gflow.workflow.v1.ProcessApprovalType
	(*WorkflowDTO)(nil),               // 5: greek.gflow.workflow.v1.WorkflowDTO
	(*CreateWorkflowRequest)(nil),     // 6: greek.gflow.workflow.v1.CreateWorkflowRequest
	(*CreateWorkflowResponse)(nil),    // 7: greek.gflow.workflow.v1.CreateWorkflowResponse
	(*GetWorkflowDetailRequest)(nil),  // 8: greek.gflow.workflow.v1.GetWorkflowDetailRequest
	(*GetWorkflowDetailResponse)(nil), // 9: greek.gflow.workflow.v1.GetWorkflowDetailResponse
	(*GetWorkflowsRequest)(nil),       // 10: greek.gflow.workflow.v1.GetWorkflowsRequest
	(*GetWorkflowsResponse)(nil),      // 11: greek.gflow.workflow.v1.GetWorkflowsResponse
	(*UpdateWorkflowRequest)(nil),     // 12: greek.gflow.workflow.v1.UpdateWorkflowRequest
	(*DeleteWorkflowRequest)(nil),     // 13: greek.gflow.workflow.v1.DeleteWorkflowRequest
	(*ProcessDiagram)(nil),            // 14: greek.gflow.workflow.v1.ProcessDiagram
	(*ProcessDTO)(nil),                // 15: greek.gflow.workflow.v1.ProcessDTO
	(*CreateProcessRequest)(nil),      // 16: greek.gflow.workflow.v1.CreateProcessRequest
	(*CreateProcessResponse)(nil),     // 17: greek.gflow.workflow.v1.CreateProcessResponse
	(*UpdateProcessRequest)(nil),      // 18: greek.gflow.workflow.v1.UpdateProcessRequest
	(*DrawProcessesRequest)(nil),      // 19: greek.gflow.workflow.v1.DrawProcessesRequest
	(*DeleteProcessRequest)(nil),      // 20: greek.gflow.workflow.v1.DeleteProcessRequest
	(*DeleteProcessesRequest)(nil),    // 21: greek.gflow.workflow.v1.DeleteProcessesRequest
	(*HelloRequest)(nil),              // 22: greek.gflow.workflow.v1.HelloRequest
	(*HelloReply)(nil),                // 23: greek.gflow.workflow.v1.HelloReply
	(*durationpb.Duration)(nil),       // 24: google.protobuf.Duration
	(*emptypb.Empty)(nil),             // 25: google.protobuf.Empty
}
var file_workflow_proto_depIdxs = []int32{
	0,  // 0: greek.gflow.workflow.v1.WorkflowDTO.type:type_name -> greek.gflow.workflow.v1.WorkflowType
	1,  // 1: greek.gflow.workflow.v1.WorkflowDTO.status:type_name -> greek.gflow.workflow.v1.Status
	24, // 2: greek.gflow.workflow.v1.WorkflowDTO.created_at:type_name -> google.protobuf.Duration
	1,  // 3: greek.gflow.workflow.v1.CreateWorkflowRequest.status:type_name -> greek.gflow.workflow.v1.Status
	0,  // 4: greek.gflow.workflow.v1.CreateWorkflowRequest.type:type_name -> greek.gflow.workflow.v1.WorkflowType
	5,  // 5: greek.gflow.workflow.v1.GetWorkflowDetailResponse.workflow:type_name -> greek.gflow.workflow.v1.WorkflowDTO
	15, // 6: greek.gflow.workflow.v1.GetWorkflowDetailResponse.process:type_name -> greek.gflow.workflow.v1.ProcessDTO
	0,  // 7: greek.gflow.workflow.v1.GetWorkflowsRequest.type:type_name -> greek.gflow.workflow.v1.WorkflowType
	5,  // 8: greek.gflow.workflow.v1.GetWorkflowsResponse.workflow_dtos:type_name -> greek.gflow.workflow.v1.WorkflowDTO
	0,  // 9: greek.gflow.workflow.v1.UpdateWorkflowRequest.type:type_name -> greek.gflow.workflow.v1.WorkflowType
	1,  // 10: greek.gflow.workflow.v1.UpdateWorkflowRequest.status:type_name -> greek.gflow.workflow.v1.Status
	2,  // 11: greek.gflow.workflow.v1.ProcessDTO.type:type_name -> greek.gflow.workflow.v1.ProcessType
	4,  // 12: greek.gflow.workflow.v1.ProcessDTO.approval_type:type_name -> greek.gflow.workflow.v1.ProcessApprovalType
	14, // 13: greek.gflow.workflow.v1.ProcessDTO.diagram:type_name -> greek.gflow.workflow.v1.ProcessDiagram
	24, // 14: greek.gflow.workflow.v1.ProcessDTO.updated_at:type_name -> google.protobuf.Duration
	3,  // 15: greek.gflow.workflow.v1.ProcessDTO.mode:type_name -> greek.gflow.workflow.v1.ProcessMode
	2,  // 16: greek.gflow.workflow.v1.UpdateProcessRequest.type:type_name -> greek.gflow.workflow.v1.ProcessType
	4,  // 17: greek.gflow.workflow.v1.UpdateProcessRequest.approval_type:type_name -> greek.gflow.workflow.v1.ProcessApprovalType
	14, // 18: greek.gflow.workflow.v1.DrawProcessesRequest.diagram:type_name -> greek.gflow.workflow.v1.ProcessDiagram
	6,  // 19: greek.gflow.workflow.v1.Workflow.CreateWorkflow:input_type -> greek.gflow.workflow.v1.CreateWorkflowRequest
	8,  // 20: greek.gflow.workflow.v1.Workflow.GetWorkflowDetail:input_type -> greek.gflow.workflow.v1.GetWorkflowDetailRequest
	10, // 21: greek.gflow.workflow.v1.Workflow.GetWorkflows:input_type -> greek.gflow.workflow.v1.GetWorkflowsRequest
	12, // 22: greek.gflow.workflow.v1.Workflow.UpdateWorkflow:input_type -> greek.gflow.workflow.v1.UpdateWorkflowRequest
	13, // 23: greek.gflow.workflow.v1.Workflow.DeleteWorkflow:input_type -> greek.gflow.workflow.v1.DeleteWorkflowRequest
	16, // 24: greek.gflow.workflow.v1.Workflow.CreateProcess:input_type -> greek.gflow.workflow.v1.CreateProcessRequest
	18, // 25: greek.gflow.workflow.v1.Workflow.UpdateProcess:input_type -> greek.gflow.workflow.v1.UpdateProcessRequest
	19, // 26: greek.gflow.workflow.v1.Workflow.DrawProcesses:input_type -> greek.gflow.workflow.v1.DrawProcessesRequest
	20, // 27: greek.gflow.workflow.v1.Workflow.DeleteProcess:input_type -> greek.gflow.workflow.v1.DeleteProcessRequest
	21, // 28: greek.gflow.workflow.v1.Workflow.DeleteProcesses:input_type -> greek.gflow.workflow.v1.DeleteProcessesRequest
	22, // 29: greek.gflow.workflow.v1.Workflow.SayHello:input_type -> greek.gflow.workflow.v1.HelloRequest
	7,  // 30: greek.gflow.workflow.v1.Workflow.CreateWorkflow:output_type -> greek.gflow.workflow.v1.CreateWorkflowResponse
	9,  // 31: greek.gflow.workflow.v1.Workflow.GetWorkflowDetail:output_type -> greek.gflow.workflow.v1.GetWorkflowDetailResponse
	11, // 32: greek.gflow.workflow.v1.Workflow.GetWorkflows:output_type -> greek.gflow.workflow.v1.GetWorkflowsResponse
	25, // 33: greek.gflow.workflow.v1.Workflow.UpdateWorkflow:output_type -> google.protobuf.Empty
	25, // 34: greek.gflow.workflow.v1.Workflow.DeleteWorkflow:output_type -> google.protobuf.Empty
	17, // 35: greek.gflow.workflow.v1.Workflow.CreateProcess:output_type -> greek.gflow.workflow.v1.CreateProcessResponse
	25, // 36: greek.gflow.workflow.v1.Workflow.UpdateProcess:output_type -> google.protobuf.Empty
	25, // 37: greek.gflow.workflow.v1.Workflow.DrawProcesses:output_type -> google.protobuf.Empty
	25, // 38: greek.gflow.workflow.v1.Workflow.DeleteProcess:output_type -> google.protobuf.Empty
	25, // 39: greek.gflow.workflow.v1.Workflow.DeleteProcesses:output_type -> google.protobuf.Empty
	23, // 40: greek.gflow.workflow.v1.Workflow.SayHello:output_type -> greek.gflow.workflow.v1.HelloReply
	30, // [30:41] is the sub-list for method output_type
	19, // [19:30] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_workflow_proto_init() }
func file_workflow_proto_init() {
	if File_workflow_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_workflow_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWorkflowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWorkflowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkflowDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkflowDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkflowsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkflowsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWorkflowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWorkflowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessDiagram); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProcessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProcessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProcessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrawProcessesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProcessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProcessesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelloRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelloReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_workflow_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_workflow_proto_goTypes,
		DependencyIndexes: file_workflow_proto_depIdxs,
		EnumInfos:         file_workflow_proto_enumTypes,
		MessageInfos:      file_workflow_proto_msgTypes,
	}.Build()
	File_workflow_proto = out.File
	file_workflow_proto_rawDesc = nil
	file_workflow_proto_goTypes = nil
	file_workflow_proto_depIdxs = nil
}
