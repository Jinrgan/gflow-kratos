// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: shift.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShiftServiceClient is the client API for ShiftService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShiftServiceClient interface {
	CreateAffair(ctx context.Context, in *Affair, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAffairByCurrentUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Affair, error)
	GetAffairs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAffairsResponse, error)
	CreateShift(ctx context.Context, in *CreateShiftRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetShifts(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetShiftsResponse, error)
}

type shiftServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShiftServiceClient(cc grpc.ClientConnInterface) ShiftServiceClient {
	return &shiftServiceClient{cc}
}

func (c *shiftServiceClient) CreateAffair(ctx context.Context, in *Affair, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/bbm.mci.shift.v1.ShiftService/CreateAffair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftServiceClient) GetAffairByCurrentUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Affair, error) {
	out := new(Affair)
	err := c.cc.Invoke(ctx, "/bbm.mci.shift.v1.ShiftService/GetAffairByCurrentUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftServiceClient) GetAffairs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAffairsResponse, error) {
	out := new(GetAffairsResponse)
	err := c.cc.Invoke(ctx, "/bbm.mci.shift.v1.ShiftService/GetAffairs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftServiceClient) CreateShift(ctx context.Context, in *CreateShiftRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/bbm.mci.shift.v1.ShiftService/CreateShift", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftServiceClient) GetShifts(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetShiftsResponse, error) {
	out := new(GetShiftsResponse)
	err := c.cc.Invoke(ctx, "/bbm.mci.shift.v1.ShiftService/GetShifts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShiftServiceServer is the server API for ShiftService service.
// All implementations must embed UnimplementedShiftServiceServer
// for forward compatibility
type ShiftServiceServer interface {
	CreateAffair(context.Context, *Affair) (*emptypb.Empty, error)
	GetAffairByCurrentUser(context.Context, *emptypb.Empty) (*Affair, error)
	GetAffairs(context.Context, *emptypb.Empty) (*GetAffairsResponse, error)
	CreateShift(context.Context, *CreateShiftRequest) (*emptypb.Empty, error)
	GetShifts(context.Context, *emptypb.Empty) (*GetShiftsResponse, error)
	mustEmbedUnimplementedShiftServiceServer()
}

// UnimplementedShiftServiceServer must be embedded to have forward compatible implementations.
type UnimplementedShiftServiceServer struct {
}

func (UnimplementedShiftServiceServer) CreateAffair(context.Context, *Affair) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAffair not implemented")
}
func (UnimplementedShiftServiceServer) GetAffairByCurrentUser(context.Context, *emptypb.Empty) (*Affair, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAffairByCurrentUser not implemented")
}
func (UnimplementedShiftServiceServer) GetAffairs(context.Context, *emptypb.Empty) (*GetAffairsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAffairs not implemented")
}
func (UnimplementedShiftServiceServer) CreateShift(context.Context, *CreateShiftRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShift not implemented")
}
func (UnimplementedShiftServiceServer) GetShifts(context.Context, *emptypb.Empty) (*GetShiftsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShifts not implemented")
}
func (UnimplementedShiftServiceServer) mustEmbedUnimplementedShiftServiceServer() {}

// UnsafeShiftServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShiftServiceServer will
// result in compilation errors.
type UnsafeShiftServiceServer interface {
	mustEmbedUnimplementedShiftServiceServer()
}

func RegisterShiftServiceServer(s grpc.ServiceRegistrar, srv ShiftServiceServer) {
	s.RegisterService(&ShiftService_ServiceDesc, srv)
}

func _ShiftService_CreateAffair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Affair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShiftServiceServer).CreateAffair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bbm.mci.shift.v1.ShiftService/CreateAffair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShiftServiceServer).CreateAffair(ctx, req.(*Affair))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShiftService_GetAffairByCurrentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShiftServiceServer).GetAffairByCurrentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bbm.mci.shift.v1.ShiftService/GetAffairByCurrentUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShiftServiceServer).GetAffairByCurrentUser(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShiftService_GetAffairs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShiftServiceServer).GetAffairs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bbm.mci.shift.v1.ShiftService/GetAffairs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShiftServiceServer).GetAffairs(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShiftService_CreateShift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShiftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShiftServiceServer).CreateShift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bbm.mci.shift.v1.ShiftService/CreateShift",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShiftServiceServer).CreateShift(ctx, req.(*CreateShiftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShiftService_GetShifts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShiftServiceServer).GetShifts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bbm.mci.shift.v1.ShiftService/GetShifts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShiftServiceServer).GetShifts(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ShiftService_ServiceDesc is the grpc.ServiceDesc for ShiftService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShiftService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bbm.mci.shift.v1.ShiftService",
	HandlerType: (*ShiftServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAffair",
			Handler:    _ShiftService_CreateAffair_Handler,
		},
		{
			MethodName: "GetAffairByCurrentUser",
			Handler:    _ShiftService_GetAffairByCurrentUser_Handler,
		},
		{
			MethodName: "GetAffairs",
			Handler:    _ShiftService_GetAffairs_Handler,
		},
		{
			MethodName: "CreateShift",
			Handler:    _ShiftService_CreateShift_Handler,
		},
		{
			MethodName: "GetShifts",
			Handler:    _ShiftService_GetShifts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shift.proto",
}
